git remote add origin https://github.com/AlVoitka/logist_portal.git
git push -u origin master


/////////////////--- Структура проекта --- /////////////////

1. Cоздаю попку проекта, и внутри создаю папки src и public:
в src:
-создаю файл index.js   - Копирую из проекта раннего.  Это основной файл импортирующий в себя сбору и библиотеку.это основной файл который будет читать браузер
-создаю папку components - с  кусочками проректа. И в ней размещаю всю структуру проекта по компонентам.
Основной компонент - app .это основной компонент, объеденяющий в себе все остальные

-создаю папку resources - папка с ресурсами- иконки, img, background и тд
-создаю папку services - тут будут те части моего приложения или вебсайта которые будут общаться со сторонними ресурсами, например с API
-создаю папку style - тут будут глобальные стили для index и переменные

в public:
-создаю index.html  -  копирую из прежних проектов и редактирую. Там базовая структура, подключение шрифтов и библиотек если нужно.
-закидываю favicon.ico - иконка Отображается браузером во вкладке перед названием страницы, и в качестве картинки рядом с закладкой

2. прописываю файл gitignore

3. Копирую файл package.json из ранее созданных проектов в корень этого. Файл хранит список пакетов (необходимые плагины (зависимости))
которые нужны для проекта, и для того чтобы их установить в терминале команда: npm install
после выполнения создаётся папка node_modules в корне проекта с большим кол-вом пакетов.(Для того чтобы начать проект и подключить к нему
NPM-пакеты нужно установить Node.js версию не ниже 14 для работы с реактом.)






///////////////---  Работа с основными файлами index.js и App.js  и первый компонент в сборке ---///////////

1. в файле index.js - Это основной файл импортирующий в себя сбору(App) и библиотеку.  Важно правильно прописать пути к файлам!!!!!!!!

import React from 'react';    ----- импортирую  библиотеку реакт
import ReactDOM from 'react-dom';     ----- реакт-дом
import App from './components/app/App';    ------ главный компонент App

import './index.css';

import 'bootstrap/dist/css/bootstrap.min.css';    ----- это будстрэп

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

Разбор:
 В метод рендер передаю 2 аргумента:
первый - что я рендерю на страницу:
<React.StrictMode>
    <App />    ---- рендерю сборку
</React.StrictMode>


второй - во что я помещаю переданный App
document.getElementById('root')

('root') -  в папке public есть файл index.html и в его теле главный див с id 'root' - куда и будет
помещаться приложение (реакт). Те буду вставлять все что сделаю в реакте в этот блок. Именно дом-реакт отвечает за взаимодействие 
с дом- деревом.


2. App.js - сборка импортирующая в себя все отдельные куски - компоненты. Она может выступать как функциональным компонентом
( к примеру на хуках), так и классовым.

- классовый: содержит состояние 

import AppHeader from "../appHeader/AppHeader"; ----- вот импортирую компонент AppHeader

class App extends Component {
    
    state = {
        selectedChar: null
    }

    render() {
        return (
            <div className="app">
                <AppHeader/>   ---- сюда размещаю его
            </div>
        )
    }
}

export default App;


- функциональный: может быть простым или на хуках для передачи состояния

import AppHeader from "../appHeader/AppHeader";  ----- вот импортирую компонент AppHeader

function App() {
  return (
    <div className="App">
      <AppHeader/>   ------ вот размещаю
    </div>
  );
}

export default App;


Синтаксисе JSX  должен быть только один корневой элемент, тоесть все помещается в один div.
он идет как аргумент для создания

const elem = (
    <div>
      <h2>Hello</h2>
      <input type="text"/>
      <button/>
    </div>
);

Но также можно использовать реакт-фрагмент:
Возврат нескольких элементов из компонента является распространённой практикой в React. 
Фрагменты позволяют формировать список дочерних элементов, не создавая лишних узлов в DOM.

render() {
  return (
    <React.Fragment>  ---- вот так вместо div
      <ChildA />
      <ChildB />
      <ChildC />
    </React.Fragment> ---- вот так 
  );
}

Или же можно использовать сокращенную запись, Она выглядит как пустые теги. Однако такая запись не поддерживает ключи или атрибуты:

  render() {
    return (
      <>              -------------- ВОТ
        <td>Привет</td>
        <td>Мир</td>
      </>             ---------------ВОТ
  );


3. Не забываем экспортировать компонеты ( те что остальные куски)!!!!!!!!!!!!




///////////////////////------ Работа со стилями-----////////////////////////////

1. Создаю файл style.scss в папке style и задаю глобалиные стили для главного div куда будет помещаться весь контент.
И в файле index.js принимаю этот файл:
import './style/style.scss';

Ниже стандартная для начала разметка:

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}


2.  При кождом компоненте создаю файл со стилями. В компоненте, где рендерю верстку к элементам добавляю класс и если буду использовать variables,
то импортирую их dв файл со стилями: @import '../../style/variables.scss';
В файле стилей назначаю классу что-либо, и импортирую файл со стилями в компонент:

import './header.scss';   --- вот импортирую

const Header = () => {
    return <h2 className="app__header">Hello!</h2>  ---- вот назначил класс
  }

  export default Header;  




  /////////////////// --- Базовые элементы страницы и основная разметка ---//////////////////////

  <body> – тело документа, включающее теги, атрибуты, текст и изображения. Отображается в браузере.
    <header> – Шапка страницы оформляется в тег header. Заголовок страницы обязательно пишем тегом h1.
    <nav> – навигация по ресурсу непосредственно в шапке. Может быть также использован как в aside, так и в footer.
    <main> – основной контент документа.
    <section> – секция для одного типа содержания. Допустимо наличие несколько одноименных тегов. Тег section — используется 
    для представления
     группы или секции тематически связанного контента.
    <h1> – заголовок страницы.
    <aside> – боковая колонка, также именуемая как «сайдбар» - sidebar. Для каждого отдельного элемента сайдбара используем блок aside.
     Внутри него заголовок оформляем тегом h1.
    <footer> – подвал сайта. Подвал сайта оформляется тегом <footer>


Для Реакта оснавная структура должна выглядеть так:

<body>
  <div id="root">
    <div class=""app>
      <header></header> -- в хедер помещу реакт компоненты в обязательными тегами <nav> и <h1> 
      <main></main>   --  тут внутри <section>
      <footer></footer>
    </div>
  </div>
</body>

Далее нужно задать основные стили:

 --- Для <div id="root"> в документе style.scss:

  box-sizing: border-box; - это свойства отвечает за правильное отображение свойст ширины и высоты с учетом margin и pading.
   Берет все элементы и подводит под один шаблон 
  margin: 0; - эти свойства задаются как правило сразу для того чтобы все элементы сбросили свои значения по умолчанию 
  padding: 0; -  эти свойства задаются как правило сразу для того чтобы все элементы сбросили свои значения по умолчанию 

--- для <div class=""app>  

 .app {
    margin: 0 auto;
    position: relative;
  }



    На основе практики создания адаптивных сайтов, используем вот такой комплект ширин (для верстки с использованием брейкпоинтов):
320 или 480 — телефоны/смартфоны
800 — смартфоны/планшеты
1024 — ноутбуки/планшеты
1280 — десктопы/планшеты/ноутбуки
1600 — десктопы

А вообще, суть адаптивного сайта автоматически подстраиваться под любой размер экрана, и в идеале лучше вообще обойтись 
без переломных точек, а просто плавно подстраивать элементы сайта (размеры блоков, размеры шрифтов и т.д.) под размер экрана.

  
   